<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      heron_sim.launch
\authors   Guy Stoppi <gstoppi@clearpathrobotics.com>
\copyright Copyright (c) 2018, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>

  <!-- Debug flag -->
  <arg name="hydro_debug" default="0"/>
  <rosparam param="/use_sim_time">true</rosparam>

  <!-- Vehicle's initial pose -->
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="0.14"/>
  <arg name="roll"  value="0"/>
  <arg name="pitch" value="0"/>
  <arg name="yaw"   default="0"/>

  <arg name="namespace" default=""/>
  <arg name="config" default="base" />

  <group ns="/$(arg namespace)">

    <!-- Translates /cmd_drive message to thrusters/*/input commands -->
    <node pkg="heron_gazebo" type="cmd_drive_translate" name="cmd_drive_to_thrusters">
      <param name="namespace" value="$(arg namespace)" />
    </node>

    <!-- Filter for Imu message -->
    <!--
      The filter needs MagneticField messages, so start a node to translate from the Vector3Stamped messages
      provided by the plugin
    -->
    <node pkg="heron_gazebo" type="vector3_to_magnetic_field" name="mag_translation">
      <param name="mag_in"    value="/imu/mag_raw" />
      <param name="mag_out"   value="/imu/mag" />
    </node>
    <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick">
      <param name="~use_magnetic_field_msg" value="true" />
      <param name="~use_mag" value="true" />
      <param name="world_frame" value="enu" />
      <param name="publish_debug_topics" value="true" />
      <param name="~publish_tf" value="false" />
    </node>

    <!-- Heron thruster controller -->
    <node pkg="heron_controller" type="controller" name="controller">
      <rosparam file="$(find heron_gazebo)/config/heron_controller.yaml" />
    </node>

    <!-- Translate Imu's quaternion to Roll/Pitch/Yaw -->
    <node pkg="heron_gazebo" type="rpy_translator" name="rpy_translator" />

    <group if="$(eval namespace == '')">
      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model heron -param /robot_description"/>
    </group>

    <group unless="$(eval namespace == '')">
      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
    </group>

    <!-- Server for RViz Interactive Markers -->
    <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server">
     <param name="link_name" value="$(arg namespace)/base_link" />
     <remap from="twist_marker_server/cmd_vel" to="cmd_vel_unscaled" />
    </node>

    <!-- Translate Twist message from twist_server to Wrench message -->
    <node pkg="heron_gazebo" type="twist_translate" name="twist_translate">
	     <rosparam file="$(find heron_gazebo)/config/heron_controller.yaml" />
       <param name="cov_limits/velocity" value="0.01" />
    </node>

    <!-- Translates navsat/velocity from Vector3Stamped to TwistStamped on navsat/vel -->
    <node pkg="heron_gazebo" type="navsat_vel_translate" name="navvel_translate" />

    <node pkg="heron_gazebo" type="activate_control_service" name="activate_control_service" />

  </group>


  <!-- Basic localization -->
  <rosparam param="/$(arg namespace)/ekf_localization_node/tf_prefix" subst_value="True">$(arg namespace)</rosparam>
  <rosparam param="/$(arg namespace)/navsat_transform_node/tf_prefix" subst_value="True">$(arg namespace)</rosparam>
  <rosparam param="/$(arg namespace)/navsat_transform_node/use_odometry_yaw">true</rosparam>
  <include file="$(find heron_control)/launch/control.launch" ns="/$(arg namespace)" />

  <!-- Launches Heron's description nodes -->
  <include file="$(find heron_description)/launch/description.launch">
    <arg name="namespace" value="$(arg namespace)" />
    <arg name="hydro_debug" value="$(arg hydro_debug)" />
  </include>

</launch>
